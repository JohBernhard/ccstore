# This script is used by Travis CI to run automatically Continuous test integration
# For syntax, see http://about.travis-ci.org/docs/user/languages/php/

sudo: required
dist: trusty

language: php

php:
- '5.4'
- '5.5'
- '5.6'
- '7.0'
- nightly

addons:
  #MariaDB addon not available on trusty
  #mariadb: '10.0'
  # FIXME: find a way to import a MySQL dump into PostgreSQL
  #postgresql: '9.3'
  apt:
    packages:
    # We need a webserver to test the webservices
    # Let's install Apache with.
    - apache2
    # mod_php is not supported by Travis. Add fcgi. We install FPM later on.
    - mysql-server

# Start on every boot
services:
- memcached

env:
  global:
  # Set to true for very verbose output
  - DEBUG=true
  matrix:
  # MariaDB overrides MySQL installation so it's not possible to test both yet
  - DB=mysql
  #- DB=mariadb
  # FIXME: find a way to import a MySQL dump into PostgreSQL
  #- DB=postgresql
  # TODO
  #- DB=sqlite
  # See https://docs.travis-ci.com/user/languages/php/#Apache-%2B-PHP
  #- WS=apache
  # See https://github.com/DracoBlue/travis-ci-nginx-php-fpm-test
  #- WS=nginx

matrix:
  fast_finish: true
  allow_failures:
  - php: nightly
  # FIXME
  #- env: DB=postgresql
  # TODO
  #- env: DB=sqlite

notifications:
  email:
    on_success: never # [always|never|change] default: change
    on_failure: change # [always|never|change] default: always

before_install:
- |
  echo "Disabling Xdebug for composer"
  export PHP_VERSION_NAME=$(phpenv version-name)
  cp ~/.phpenv/versions/$PHP_VERSION_NAME/etc/conf.d/xdebug.ini /tmp/xdebug.ini
  phpenv config-rm xdebug.ini
  echo

install:

- |
  echo "Adding packages"
  sudo apt-get -qq update
  sudo apt-get install libapache2-mod-fcgid

- |
  echo "Updating Composer"
  composer self-update
  echo

- |
  echo "Installing Parallel Lint"
  composer -n require jakub-onderka/php-parallel-lint ^0
  composer -n require jakub-onderka/php-console-highlighter ^0
  echo

- |
  echo "Installing PHP Unit"
  if [ "$TRAVIS_PHP_VERSION" = '5.3' ] || [ "$TRAVIS_PHP_VERSION" = '5.4' ] || [ "$TRAVIS_PHP_VERSION" = '5.5' ]; then
    composer -n require phpunit/phpunit ^4
  fi
  if [ "$TRAVIS_PHP_VERSION" = '5.6' ] || [ "$TRAVIS_PHP_VERSION" = '7.0' ] || [ "$TRAVIS_PHP_VERSION" = 'nightly' ]; then
    composer -n require phpunit/phpunit ^5
  fi
  echo

- |
  echo "Installing PHP CodeSniffer"
  composer require squizlabs/php_codesniffer ^2
  echo

- |
  echo "Adding Composer binaries to the path"
  export PATH="$TRAVIS_BUILD_DIR/vendor/bin:$PATH"
  echo

before_script:
- |
  echo Start travis
  echo Current dir is `pwd`
  echo Home dir is `echo ~`
  echo TRAVIS_BUILD_DIR is $TRAVIS_BUILD_DIR

- |
  echo "Re-enabling Xdebug for PHP CodeSniffer and PHP Unit"
  phpenv config-add /tmp/xdebug.ini
  echo

- |
  echo "Setting up PHP"
  echo
  echo "Set timezone"
  echo 'date.timezone = "Europe/Paris"' >> ~/.phpenv/versions/$PHP_VERSION_NAME/etc/php.ini
  sed -i -e 's/^display_errors = On$/display_errors = Off/g' ~/.phpenv/versions/$PHP_VERSION_NAME/etc/php.ini
  if [ "$TRAVIS_PHP_VERSION" = '5.3' ] || [ "$TRAVIS_PHP_VERSION" = '5.4' ]; then
    echo "Enabling Memcached for PHP <= 5.4"
    #   Documentation says it should be available for all PHP versions but it's not for 5.5 and 5.6, 7.0 and nightly!
    echo 'extension = memcached.so' >> ~/.phpenv/versions/$PHP_VERSION_NAME/etc/php.ini
  fi
  phpenv rehash
  echo

- |
  echo "Install nka's Dolibarr"
  git clone -b dev_nka https://github.com/nka11/dolibarr.git ~/dolibarr
  cd ~/dolibarr ; composer install ; cd -

- |
  if [ "$DEBUG" = true ]; then
    echo "Debugging informations"
    # Check PHP
    php -i
    # Check PHP CodeSniffer installation
    which phpcs
    phpcs --version
    phpcs -i
    # Check PHPUnit installation
    which phpunit
    phpunit --version
    # Check MySQL
    mysql --version
    mysql -e "SELECT VERSION();"
    echo
  fi
  
- |
  echo "Setting up database"
  if [ "$DB" = 'mysql' ] || [ "$DB" = 'mariadb' ]; then
    echo "MySQL"
    sudo mysql -e 'CREATE USER travis;'
    sudo mysql -e 'GRANT ALL ON *.* TO '\''travis'\''@'\''%'\'';'
    sudo mysql -e 'GRANT ALL ON *.* TO '\''travis'\''@'\''localhost'\'';'
    mysql -e 'DROP DATABASE IF EXISTS travis;'
    mysql -e 'CREATE DATABASE IF NOT EXISTS travis;'
    mysql -D travis < ~/dolibarr/dev/initdemo/mysqldump_dolibarr_3.5.0.sql
  fi
  #if [ "$DB" = 'postgresql' ]; then
  #  pgsql travis < dev/initdemo/mysqldump_dolibarr_3.5.0.sql
  #fi
  # TODO: SQLite
  echo

- |
  export CONF_FILE=~/dolibarr/htdocs/conf/conf.php
  echo "Setting up Dolibarr $CONF_FILE"
  echo '<?php ' > $CONF_FILE
  echo '$'dolibarr_main_url_root=\'http://127.0.0.1\'';' >> $CONF_FILE
  echo '$'dolibarr_main_document_root=\'$HOME/dolibarr/htdocs\'';' >> $CONF_FILE
  echo '$'dolibarr_main_data_root=\'$HOME/documents\'';' >> $CONF_FILE
  echo '$'dolibarr_main_db_host=\'127.0.0.1\'';' >> $CONF_FILE
  echo '$'dolibarr_main_db_name=\'travis\'';' >> $CONF_FILE
  echo '$'dolibarr_main_db_user=\'travis\'';' >> $CONF_FILE
  if [ "$DB" = 'mysql' ] || [ "$DB" = 'mariadb' ]; then
    echo '$'dolibarr_main_db_type=\'mysqli\'';' >> $CONF_FILE
  fi
  # FIXME
  #if [ "$DB" = 'postgresql' ]; then
  #  echo '$'dolibarr_main_db_type=\'pgsql\'';' >> $CONF_FILE
  #fi
  # TODO: SQLite
  echo '$'dolibarr_main_authentication=\'dolibarr\'';' >> $CONF_FILE
  cat $CONF_FILE
  echo

- |
  echo "Create documents directory and set permissions"
  # and admin/temp subdirectory needed for unit tests
  mkdir -p ~/dolibarr/documents/admin/temp
  echo "first line" > ~/dolibarr/documents/dolibarr.log
  echo

- |
  echo "Setting up Apache + PHP"
   cp ~/.phpenv/versions/$PHP_VERSION_NAME/etc/php-fpm.conf.default ~/.phpenv/versions/$PHP_VERSION_NAME/etc/php-fpm.conf
   if [ "$TRAVIS_PHP_VERSION" = '7.0' ] || [ "$TRAVIS_PHP_VERSION" = 'nightly' ]; then
    # Copy the included pool
    cp ~/.phpenv/versions/$PHP_VERSION_NAME/etc/php-fpm.d/www.conf.default ~/.phpenv/versions/$PHP_VERSION_NAME/etc/php-fpm.d/www.conf
  fi
  sudo a2enmod rewrite actions fcgid alias

  # configure apache virtual hosts
  sudo cp -f build/apache.conf /etc/apache2/sites-available/default
  ls /etc/apache2/mods-enabled
  ls ~/.phpenv/versions/$PHP_VERSION_NAME/bin
  sudo sed -e "s?%TRAVIS_BUILD_DIR%?/home/travis/dolibarr?g" --in-place /etc/apache2/sites-available/default
  FCGID_WRAPPER=`which php-wrapper`
  echo $FCGID_WRAPPER
  sudo sed -e "s?%FCGID_WRAPPER%?$FCGID_WRAPPER?g" --in-place /etc/apache2/sites-available/default
  if [ "$DEBUG" = true ]; then
    sudo cat /etc/apache2/sites-available/default
  fi
  sudo service apache2 restart
  echo

- |
  echo "Configuring dolecommerce"
  cp conf/dolirest.cnf.php.example conf/dolirest.cnf.php
  sed -i -e 's?  \$dolibarr_api_url =.*$?  $dolibarr_api_url = "http://localhost/api/index.php";?' conf/dolirest.cnf.php


script:
- |
  echo "Checking webserver availability"
  # Ensure we catch errors
  set -e
  wget http://127.0.0.1
  if [ "$DEBUG" = true ]; then
    cat index.html
  fi
  set +e
  echo

- |
  echo "Checking PHP syntax errors"
  # Ensure we catch errors
  parallel-lint --exclude vendor  --blame .

# TODO: dev/* checks

- |
  echo "Checking coding style"
  # Exclusions are defined in the ruleset.xml file
  phpcs -s -p -d memory_limit=-1 --colors --tab-width=4 --standard=ruleset.xml --encoding=utf-8 .

# TODO: Check Javascript (jshint?)

# TODO: Check CSS (csslint?)

# TODO: check SQL syntax (pgsanity?)

- |
  echo "Upgrading Dolibarr"
  # Ensure we catch errors
  set +e
  cd ~/dolibarr/htdocs/install
  php upgrade.php 3.5.0 3.6.0 ignoredbversion > ~/dolibarr/upgrade350360.log
  php upgrade2.php 3.5.0 3.6.0 ignoredbversion > ~/dolibarr/upgrade350360-2.log
  php step5.php 3.5.0 3.6.0 ignoredbversion > ~/dolibarr/upgrade350360-3.log
  php upgrade.php 3.6.0 3.7.0 ignoredbversion > ~/dolibarr/upgrade360370.log
  php upgrade2.php 3.6.0 3.7.0 ignoredbversion > ~/dolibarr/upgrade360370-2.log
  php step5.php 3.6.0 3.7.0 ignoredbversion > ~/dolibarr/upgrade360370-3.log
  php upgrade.php 3.7.0 3.8.0 ignoredbversion > ~/dolibarr/upgrade370380.log
  php upgrade2.php 3.7.0 3.8.0 ignoredbversion > ~/dolibarr/upgrade370380-2.log
  php step5.php 3.7.0 3.8.0 ignoredbversion > ~/dolibarr/upgrade370380-3.log
  php upgrade.php 3.8.0 3.9.0 ignoredbversion > ~/dolibarr/upgrade380390.log
  php upgrade2.php 3.8.0 3.9.0 ignoredbversion > ~/dolibarr/upgrade380390-2.log
  php step5.php 3.8.0 3.9.0 ignoredbversion > ~/dolibarr/upgrade380390-3.log
  php upgrade.php 3.9.0 4.0.0 ignoredbversion > ~/dolibarr/upgrade390400.log
  php upgrade2.php 3.9.0 4.0.0 ignoredbversion > ~/dolibarr/upgrade390400-2.log
  php step5.php 3.9.0 4.0.0 ignoredbversion > ~/dolibarr/upgrade390400-3.log
  cd -
  set +e
  echo

- |
  echo "Unit testing"
  # Ensure we catch errors. Set this to +e if you want to go to the end to see log file.
  phpunit -d memory_limit=-1 -c tests/phpunittest.xml tests/

- |
  #echo "Output dolibarr.log"
  #echo cat documents/dolibarr.log

after_script:
- |
  # Dolibarr log file
  #echo "After script"
  #cat documents/dolibarr.log


after_success:
- |
  echo Success

after_failure:
- |
  echo Failure
  # This part of code seems to be never executed, error or not ???
  echo "Debugging informations"
  # Upgrade log files
  cat *.log
  echo "Debugging informations"
  # Apache log file
  sudo cat /var/log/apache2/error.log
  if [ "$DEBUG" = true ]; then
    # MariaDB log file
    sudo cat /var/log/mysql/error.log
    # TODO: PostgreSQL log file
    echo
  fi

